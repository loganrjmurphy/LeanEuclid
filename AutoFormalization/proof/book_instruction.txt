-- Primitive Sorts --
Point
Line
Circle

-- Inductive Types --
inductive Angle | right | ofPoints (A B C : Point)
inductive Segment | endpoints (a b : Point)
inductive Triangle | ofPoints (a b c : Point)

-- Notations --
"|(a─b)|" means the length of the line segment between point a and point b.
"∠ a:b:c" means the degree of the angle formed by points a, b, and c.
"∟" means the right angle.
"△ a:b:c" means the triangle formed from points a, b and c.
"Triangle.area △ a:b:c" means the area of the triangle formed by points a, b and c.

-- Relations --
namespace Point
def onLine (a : Point) (L : Line) -- point a is on line L.
def sameSide (a b : Point) (L : Line) -- point a and b are on the same side of line L.
def opposingSides (a b : Point) (L : Line) -- point a and b are on the opposite sides of line L.
def collinear : (a b c : Point) -- points a, b and c are collinear.
end Point

namespace Line
def intersectsLine (L M : Line) -- two lines L and M intersect at some point.
def intersectsCircle (L : Line) (C : Circle) -- line L and circle C intersect.
end Line

namespace Circle
def onCircle (a: Point) (C: Circle) -- point a is on circle C.
def insideCircle (a: Point) (C: Circle) -- point a is inside circle C.
def outsideCircle (a: Point) (C: Circle)-- point a is outside circle C.
def isCentre (a: Point) (C: Circle) -- point a is on the center circle C.
def intersectsCircle (C1 C2: Circle) -- circle C1 and C2 intersect.
end Circle

def between (a b c : Point) -- points a, b and c collinear and cyclically ordered.
def formTriangle (a b c : Point) (AB BC CA : Line) -- point a, b and c form a triangle, where point a and b are on line AB, point b and c are on line BC, point a and c are on line CA.
def formRectilinearAngle (a b c : Point) (AB BC : Line) -- point a, b and c form a rectilinear angle where a≠b and b≠c.
def formParallelogram (a b c d : Point) (AB CD AC BD : Line) -- point a, b, d, c (in clockwise/counterclockwise order) form a parallelogram, a and b are on line AB, c and d are on line CD, a and c are on line AC, b and d are on line BD
def distinctPointsOnLine (a b : Point) (L : Line) -- points a and b are distinct and on line L.

-- Construction Rules --
- Points -
axiom distinct_points : ∀ p₁ : Point, ∃ p₂ : Point, p₁ ≠ p₂
axiom line_nonempty : ∀ l : Line, ∃ p : Point, p.onLine l
axiom exists_distincts_points_on_line : ∀ l : Line, ∀ p : Point, ∃ p' : Point, p ≠ p' ∧ p'.onLine l
axiom exists_point_between_points_on_line : ∀ (L : Line) (b c : Point), distinctPointsOnLine b c L → ∃ a : Point, (a.onLine L) ∧ (between b a c)
axiom point_between_points_shorter_than : ∀ (L : Line) (b c : Point) (s : Segment), distinctPointsOnLine b c L ∧ (|s| > 0) → ∃ a : Point, (a.onLine L) ∧ (between b a c) ∧ (|(b─a)| < s)
axiom extend_point : ∀ (L : Line) (b c : Point), distinctPointsOnLine b c L → ∃ a : Point, (a.onLine L) ∧ (between b c a)
axiom extend_point_not_on_line : ∀ (L M : Line) (b c : Point), distinctPointsOnLine b c L ∧ L ≠ M → ∃ a : Point, (a.onLine L) ∧ (between b c a) ∧ ¬(a.onLine M)
axiom extend_point_longer : ∀ (L : Line) (b c : Point) (s : Segment), distinctPointsOnLine b c L → ∃ a : Point, (a.onLine L) ∧ (between b c a) ∧ (|(c─a)| > s)
axiom point_on_line_same_side : ∀ (L M : Line) (b : Point), ¬(b.onLine L) ∧ (L.intersectsLine M) → ∃ a : Point, a.onLine M ∧ a.sameSide b L
axiom exists_point_opposite : ∀ (L : Line) (b : Point), ¬(b.onLine L) → ∃ a : Point, a.opposingSides b L

- Lines and Circles -
axiom line_from_points : ∀ (a b : Point), a ≠ b → ∃ L : Line, (a.onLine L) ∧ (b.onLine L)
axiom circle_from_points : ∀ (a b : Point), a ≠ b → ∃ α : Circle, (a.isCentre α) ∧ (b.onCircle α)

- Intersections -
axiom intersection_lines : ∀ (L M : Line), L.intersectsLine M → ∃ a : Point, (a.onLine L) ∧ (a.onLine M)
axiom intersection_circle_line : ∀ (α : Circle) (L : Line), L.intersectsCircle α → ∃ a : Point, (a.onCircle α) ∧ (a.onLine L)
axiom intersections_circle_line : ∀ (α : Circle) (L : Line), L.intersectsCircle α → ∃ (a b : Point), (a.onCircle α) ∧ (a.onLine L) ∧ (b.onCircle α) ∧ (b.onLine L) ∧ a ≠ b
axiom intersection_circle_line_between_points : ∀ (α : Circle) (L : Line) (b c :Point), (b.insideCircle α) ∧ (b.onLine L) ∧ (c.outsideCircle α) ∧ (c.onLine L) → ∃ a : Point, (a.onCircle α) ∧ (a.onLine L) ∧ (between b a c)
axiom intersection_circle_line_extending_points : ∀ (α : Circle) (L : Line) (b c :Point), (b.insideCircle α) ∧ distinctPointsOnLine b c L → ∃ a : Point, (a.onCircle α) ∧ (a.onLine L) ∧ (between a b c)
axiom intersection_circles : ∀ (α β : Circle), α.intersectsCircle β → ∃ a : Point, (a.onCircle α) ∧ (a.onCircle β)
axiom intersection_same_side : ∀ (α β : Circle) (b c d : Point) (L : Line), (α.intersectsCircle β) ∧ (c.isCentre α) ∧ (d.isCentre β) ∧ (c.onLine L) ∧ (d.onLine L) ∧ ¬(b.onLine L) → ∃ a : Point, (a.onCircle α) ∧ (a.onCircle β) ∧ (a.sameSide b L)
axiom intersection_opposite_side : ∀ (α β : Circle) (b c d : Point) (L : Line), (α.intersectsCircle β) ∧ (c.isCentre α) ∧ (d.isCentre β) ∧ (c.onLine L) ∧ (d.onLine L) ∧ ¬(b.onLine L) → ∃ a : Point, (a.onCircle α) ∧ (a.onCircle β) ∧ a.opposingSides b L

--- Inference Rules ---
axiom two_points_determine_line : ∀ (a b : Point) (L M : Line),distinctPointsOnLine a b L ∧ (a.onLine M) ∧ (b.onLine M) → L = M
axiom superposition : ∀ (a b c d g h : Point) (AB BC AC L : Line), formTriangle a b c AB BC AC ∧ distinctPointsOnLine d g L ∧ ¬(h.onLine L) → ∃ (b' c' : Point) (BC' AC' : Line), (∠ b:a:c : ℝ) = (∠ b':d:c') ∧ (∠ a:c:b : ℝ) = (∠ d:c':b') ∧ (∠ c:b:a : ℝ) = (∠ c':b':d) ∧ |(a─b)| = |(d─b')| ∧ |(b─c)| = |(b'─c')| ∧ |(c─a)| = |(c'─d)| ∧ b'.onLine L ∧ ¬(between b' d g) ∧ c'.sameSide h L ∧ distinctPointsOnLine b' c' BC' ∧ distinctPointsOnLine d c' AC'
axiom between_if : ∀ (a b c : Point),between a b c → |(a─b)| + |(b─c)| = |(a─c)|
axiom equal_circles : ∀ (a b c : Point) (α β : Circle),(a.isCentre α) ∧ (a.isCentre β) ∧ (b.onCircle α) ∧ (c.onCircle β) ∧ |(a─b)| = |(a─c)| → α = β
axiom point_on_circle_if : ∀ (a b c : Point) (α : Circle),(a.isCentre α) ∧ (b.onCircle α) ∧ |(a─c)| = |(a─b)| → c.onCircle α
axiom point_on_circle_onlyif : ∀ (a b c : Point) (α : Circle),(a.isCentre α) ∧ (b.onCircle α) ∧ (c.onCircle α) → |(a─c)| = |(a─b)|
axiom point_in_circle_if : ∀ (a b c : Point) (α : Circle),(a.isCentre α) ∧ (b.onCircle α) ∧ (a─c) < (a─b) → c.insideCircle α
axiom sum_angles_if : ∀ (a b c d : Point) (L M : Line),(a.onLine L) ∧ (a.onLine M) ∧ (b.onLine L) ∧ (c.onLine M) ∧ (a ≠ b) ∧ (a ≠ c) ∧¬(d.onLine L) ∧ ¬(d.onLine M) ∧ (L ≠ M) ∧ (∠ b:a:c) = (∠ b:a:d) + (∠ d:a:c) →(b.sameSide d M) ∧ (c.sameSide d L)
axiom sum_angles_onlyif : ∀ (a b c d : Point) (L M : Line), (a.onLine L) ∧ (a.onLine M) ∧ (b.onLine L) ∧ (c.onLine M) ∧ (a ≠ b) ∧ (a ≠ c) ∧ (d.onLine L) ∧ ¬(d.onLine M) ∧ (L ≠ M) ∧ (b.sameSide d M) ∧ (c.sameSide d L) →  (∠ b:a:c) = (∠ b:a:d) + (∠ d:a:c)
axiom perpendicular_if : ∀ (a b c d : Point) (L : Line),(a.onLine L) ∧ (b.onLine L) ∧ (between a c b) ∧ ¬(d.onLine L) ∧ (∠ a:c:d = ∠ d:c:b) →(∠ a:c:d) = ∟
axiom sum_areas_if : ∀ (a b c d : Point) (L : Line), (a.onLine L) ∧ (b.onLine L) ∧ (c.onLine L) ∧ (a ≠ b) ∧ (a ≠ c) ∧ (b ≠ c) ∧ ¬(d.onLine L) ∧ (between a c b) → (Triangle.area △ a:c:d : ℝ) + (Triangle.area △ d:c:b) = (Triangle.area △ a:d:b)

-- Proceding Proved Propositions --
{PRECEDING_PROPOSITIONS}

-- Proof Tactics --
Your response must be a tactic proof built from the following tactics:

1. "euclid_intros"
This tactic introduces universally quantified variables and premises of the current goal into the proof context. No names are required.

2. "euclid_apply <rule> <args>" and "euclid_apply <rule> <args> as <name>"
These two tactics instantiate <rule> with <args> and prove premise P from the local proof context. 
Note that the "euclid_apply <rule> <args> as <name>" is ONLY applicable if the <rule> produces an existentially quantified proposition, i.e., has the form ∀ (<args> : Types) ... P -> ∃ x , Q(x).
If <rule> has the form ∀ (<args> : Types) ... P -> Q, proposition Q is added to the proof context if the tactic is applied successfully.
If <rule> has the form ∀ (<args> : Types) ... P -> ∃ x , Q(x), object x and premise Q(x) are added to the proof context if the tactic is applied successfully.
usage examples :
  euclid_apply between_if a b c
  euclid_apply line_from_points p1 p2 as M

3. "have <name> : <claim> := by <proof>"
This tactic proves a lemma <claim>. The <name> is optional, and you need to use euclid_finish at the end of <proof>.

4. "euclid_assert <P>"
This tactic proves proposition <P> from the current proof context and the above axioms using an SMT solver. Equivalent to "have : <P> := by euclid_finish".

5. "use <X>"
This tactic proves an existentially quantified proposition by providing the witness <X> for the quantifier.

7. "euclid_finish"
This tactic resolves the proof goal from the current proof context and the above axioms using an SMT solver.

-- Guidelines --
1. Response Format: Present your proof within THREE angle brackets by <<<Your Proof>>>. Do not add any annotations/explanations in your proof. Do not use markdown syntax.
2. You can use standard Lean tactics such as "by_cases", "cases", "split_ands" and "constructor" to structure your proof. But, you should not use imperative Lean tactics, such as `rw` or `simp`.
3. When applying a proposition using "euclid_apply", pay attention to the order of variables in the original proposition.
